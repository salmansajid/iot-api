//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TIOTEntities1 : DbContext
    {
        public TIOTEntities1()
            : base("name=TIOTEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Command> Commands { get; set; }
        public virtual DbSet<CommandExecuteHistory> CommandExecuteHistories { get; set; }
        public virtual DbSet<CommandHistory> CommandHistories { get; set; }
        public virtual DbSet<CommandsQueue> CommandsQueues { get; set; }
        public virtual DbSet<CustomNotification> CustomNotifications { get; set; }
        public virtual DbSet<EquipmentScheduling> EquipmentSchedulings { get; set; }
        public virtual DbSet<EventConfigLog> EventConfigLogs { get; set; }
        public virtual DbSet<EventConfigTemp> EventConfigTemps { get; set; }
        public virtual DbSet<EventConfiguration> EventConfigurations { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<EventSMSLog> EventSMSLogs { get; set; }
        public virtual DbSet<Feature> Features { get; set; }
        public virtual DbSet<FederalHoliday> FederalHolidays { get; set; }
        public virtual DbSet<FirmwareScheduling> FirmwareSchedulings { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<LoginFeature> LoginFeatures { get; set; }
        public virtual DbSet<LoginGroup> LoginGroups { get; set; }
        public virtual DbSet<ObjectCommand> ObjectCommands { get; set; }
        public virtual DbSet<ObjectGroup> ObjectGroups { get; set; }
        public virtual DbSet<ObjectLastStatu> ObjectLastStatus { get; set; }
        public virtual DbSet<OBJECT> OBJECTS { get; set; }
        public virtual DbSet<ObjectSensor> ObjectSensors { get; set; }
        public virtual DbSet<PMDATA> PMDATAs { get; set; }
        public virtual DbSet<PMessage> PMessages { get; set; }
        public virtual DbSet<RelayNotification> RelayNotifications { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Scheduling> Schedulings { get; set; }
        public virtual DbSet<SensorInterpretation> SensorInterpretations { get; set; }
        public virtual DbSet<Sensor> Sensors { get; set; }
        public virtual DbSet<SMS_SentLog> SMS_SentLog { get; set; }
        public virtual DbSet<smsDinStatetemp> smsDinStatetemps { get; set; }
        public virtual DbSet<SMSLogTempTable> SMSLogTempTables { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SwitchesReport> SwitchesReports { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ConsumptionReport> ConsumptionReports { get; set; }
        public virtual DbSet<ControllingReport> ControllingReports { get; set; }
        public virtual DbSet<DigitalInputLog> DigitalInputLogs { get; set; }
        public virtual DbSet<DigitalInputTemp> DigitalInputTemps { get; set; }
        public virtual DbSet<ReportConsumption> ReportConsumptions { get; set; }
        public virtual DbSet<ReportControlling> ReportControllings { get; set; }
        public virtual DbSet<SensorCommand> SensorCommands { get; set; }
        public virtual DbSet<SensorControlling> SensorControllings { get; set; }
        public virtual DbSet<SensorObjectGroup> SensorObjectGroups { get; set; }
        public virtual DbSet<TempSwitchReport> TempSwitchReports { get; set; }
        public virtual DbSet<CommandLogByUserID> CommandLogByUserIDs { get; set; }
        public virtual DbSet<ObjectAlertStatu> ObjectAlertStatus { get; set; }
    
        public virtual ObjectResult<SP_EquipmentControlingReport_Result> SP_EquipmentControlingReport(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EquipmentControlingReport_Result>("SP_EquipmentControlingReport", objectIDParameter);
        }
    
        public virtual ObjectResult<sp_GetConsumptionTillPackTime_Result> sp_GetConsumptionTillPackTime(Nullable<int> objectID, Nullable<int> current, Nullable<int> voltage)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var currentParameter = current.HasValue ?
                new ObjectParameter("Current", current) :
                new ObjectParameter("Current", typeof(int));
    
            var voltageParameter = voltage.HasValue ?
                new ObjectParameter("Voltage", voltage) :
                new ObjectParameter("Voltage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetConsumptionTillPackTime_Result>("sp_GetConsumptionTillPackTime", objectIDParameter, currentParameter, voltageParameter);
        }
    
        public virtual ObjectResult<sp_getdemo_Result> sp_getdemo(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getdemo_Result>("sp_getdemo", objectIDParameter);
        }
    
        public virtual ObjectResult<sp_GetFeulLastStatus_Read_Result> sp_GetFeulLastStatus_Read(Nullable<int> objectId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("objectId", objectId) :
                new ObjectParameter("objectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFeulLastStatus_Read_Result>("sp_GetFeulLastStatus_Read", objectIdParameter);
        }
    
        public virtual ObjectResult<sp_GetNONAlertState_Result> sp_GetNONAlertState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNONAlertState_Result>("sp_GetNONAlertState");
        }
    
        public virtual ObjectResult<sp_GetNonAssignedObjSenForSchd_Result> sp_GetNonAssignedObjSenForSchd(Nullable<int> objectId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNonAssignedObjSenForSchd_Result>("sp_GetNonAssignedObjSenForSchd", objectIdParameter);
        }
    
        public virtual ObjectResult<sp_GetObjectSensors_Result> sp_GetObjectSensors(Nullable<int> objectId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("objectId", objectId) :
                new ObjectParameter("objectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetObjectSensors_Result>("sp_GetObjectSensors", objectIdParameter);
        }
    
        public virtual ObjectResult<sp_GetSchedulingByObjAndDay_Result> sp_GetSchedulingByObjAndDay(Nullable<int> objectId, Nullable<int> dayId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var dayIdParameter = dayId.HasValue ?
                new ObjectParameter("DayId", dayId) :
                new ObjectParameter("DayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSchedulingByObjAndDay_Result>("sp_GetSchedulingByObjAndDay", objectIdParameter, dayIdParameter);
        }
    
        public virtual ObjectResult<sp_GetSchedulingByObjAndDayAndObS_Result> sp_GetSchedulingByObjAndDayAndObS(Nullable<int> objectId, Nullable<int> dayId, Nullable<int> objectSensorId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var dayIdParameter = dayId.HasValue ?
                new ObjectParameter("DayId", dayId) :
                new ObjectParameter("DayId", typeof(int));
    
            var objectSensorIdParameter = objectSensorId.HasValue ?
                new ObjectParameter("ObjectSensorId", objectSensorId) :
                new ObjectParameter("ObjectSensorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSchedulingByObjAndDayAndObS_Result>("sp_GetSchedulingByObjAndDayAndObS", objectIdParameter, dayIdParameter, objectSensorIdParameter);
        }
    
        public virtual ObjectResult<sp_GetSchedulingByObjAndObjSenIdForWeek_Result> sp_GetSchedulingByObjAndObjSenIdForWeek(Nullable<int> objectId, Nullable<int> objectSensorId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var objectSensorIdParameter = objectSensorId.HasValue ?
                new ObjectParameter("ObjectSensorId", objectSensorId) :
                new ObjectParameter("ObjectSensorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSchedulingByObjAndObjSenIdForWeek_Result>("sp_GetSchedulingByObjAndObjSenIdForWeek", objectIdParameter, objectSensorIdParameter);
        }
    
        public virtual ObjectResult<sp_SensorData_Read_Result> sp_SensorData_Read(Nullable<int> objectId, Nullable<int> sensorId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("objectId", objectId) :
                new ObjectParameter("objectId", typeof(int));
    
            var sensorIdParameter = sensorId.HasValue ?
                new ObjectParameter("SensorId", sensorId) :
                new ObjectParameter("SensorId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SensorData_Read_Result>("sp_SensorData_Read", objectIdParameter, sensorIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_TemperatureSensorByObject_Result> sp_TemperatureSensorByObject(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TemperatureSensorByObject_Result>("sp_TemperatureSensorByObject", objectIDParameter);
        }
    
        public virtual ObjectResult<sp_ObjectLastStatus_Read_UPDATED_Result> sp_ObjectLastStatus_Read_UPDATED(Nullable<int> objectId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("objectId", objectId) :
                new ObjectParameter("objectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ObjectLastStatus_Read_UPDATED_Result>("sp_ObjectLastStatus_Read_UPDATED", objectIdParameter);
        }
    
        public virtual ObjectResult<sp_smslog_obj_sensor_Result> sp_smslog_obj_sensor(Nullable<int> objectID, Nullable<int> objectSensor, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var objectSensorParameter = objectSensor.HasValue ?
                new ObjectParameter("ObjectSensor", objectSensor) :
                new ObjectParameter("ObjectSensor", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_smslog_obj_sensor_Result>("sp_smslog_obj_sensor", objectIDParameter, objectSensorParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_GetCurrentdateControlling_Result> sp_GetCurrentdateControlling(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCurrentdateControlling_Result>("sp_GetCurrentdateControlling", objectIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCurrentdateConsumption_Result> sp_GetCurrentdateConsumption(Nullable<int> objectId, string sensor)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(int));
    
            var sensorParameter = sensor != null ?
                new ObjectParameter("sensor", sensor) :
                new ObjectParameter("sensor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCurrentdateConsumption_Result>("sp_GetCurrentdateConsumption", objectIdParameter, sensorParameter);
        }
    
        public virtual ObjectResult<sp_EventLogbyObjectDT_Result> sp_EventLogbyObjectDT(Nullable<int> objectID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EventLogbyObjectDT_Result>("sp_EventLogbyObjectDT", objectIDParameter, startTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<sp_EventConfig_LocationByObjID_Result> sp_EventConfig_LocationByObjID(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EventConfig_LocationByObjID_Result>("sp_EventConfig_LocationByObjID", objectIDParameter);
        }
    
        public virtual ObjectResult<usp_GetObjectLastRelayStatus_Result> usp_GetObjectLastRelayStatus(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetObjectLastRelayStatus_Result>("usp_GetObjectLastRelayStatus", objectIDParameter);
        }
    
        public virtual ObjectResult<uspREPORT_DinState1_Result> uspREPORT_DinState1(Nullable<int> objectID, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspREPORT_DinState1_Result>("uspREPORT_DinState1", objectIDParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<uspGET_ObjectIDNameByGroup_Result> uspGET_ObjectIDNameByGroup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGET_ObjectIDNameByGroup_Result>("uspGET_ObjectIDNameByGroup", groupIDParameter);
        }
    
        public virtual ObjectResult<uspGet_EquipmentConsumptionByDT_Result> uspGet_EquipmentConsumptionByDT(Nullable<int> objectID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGet_EquipmentConsumptionByDT_Result>("uspGet_EquipmentConsumptionByDT", objectIDParameter, startDateParameter, endDateParameter);
        }
    }
}
